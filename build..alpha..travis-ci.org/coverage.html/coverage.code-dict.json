{"/home/travis/build/npmtest/node-npmtest-architect/test.js":"/* istanbul instrument in package npmtest_architect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-architect/lib.npmtest_architect.js":"/* istanbul instrument in package npmtest_architect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_architect = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_architect = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-architect/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-architect && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_architect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_architect\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_architect.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_architect.rollup.js'] =\n            local.assetsDict['/assets.npmtest_architect.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_architect.__dirname + '/lib.npmtest_architect.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-architect/node_modules/architect/architect.js":"( // Module boilerplate to support node.js and AMD.\n  (typeof module !== \"undefined\" && function (m) { module.exports = m(require('events')); }) ||\n  (typeof define === \"function\" && function (m) { define([\"events\"], m); })\n)(function (events) {\n\"use strict\";\nvar EventEmitter = events.EventEmitter;\n\nvar exports = {};\n\nvar DEBUG = typeof location != \"undefined\" && location.href.match(/debug=[123]/) ? true : false;\n\n// Only define Node-style usage using sync I/O if in node.\nif (typeof module === \"object\") (function () {\n    var dirname = require('path').dirname;\n    var resolve = require('path').resolve;\n    var existsSync = require('fs').existsSync || require('path').existsSync;\n    var realpathSync = require('fs').realpathSync;\n    var exists = require('fs').exists || require('path').exists;\n    var realpath = require('fs').realpath;\n    var packagePathCache = {};\n    var basePath;\n\n    exports.loadConfig = loadConfig;\n    exports.resolveConfig = resolveConfig;\n\n    // This is assumed to be used at startup and uses sync I/O as well as can\n    // throw exceptions.  It loads and parses a config file.\n    function loadConfig(configPath, callback) {\n      var config = require(configPath);\n      var base = dirname(configPath);\n\n      return resolveConfig(config, base, callback);\n    }\n\n    function resolveConfig(config, base, callback) {\n        if(typeof base === 'function') {\n          // probably being called from loadAdditionalConfig, use saved base\n          callback = base;\n          base = basePath;\n        } else {\n          basePath = base;\n        }\n\n        if (!callback)\n            return resolveConfigSync(config, base);\n        else\n            resolveConfigAsync(config, base, callback);\n    }\n\n    function resolveConfigSync(config, base) {\n        config.forEach(function (plugin, index) {\n            // Shortcut where string is used for plugin without any options.\n            if (typeof plugin === \"string\") {\n                plugin = config[index] = { packagePath: plugin };\n            }\n            // The plugin is a package on the disk.  We need to load it.\n            if (plugin.hasOwnProperty(\"packagePath\") && !plugin.hasOwnProperty(\"setup\")) {\n                var defaults = resolveModuleSync(base, plugin.packagePath);\n                Object.keys(defaults).forEach(function (key) {\n                    if (!plugin.hasOwnProperty(key)) {\n                        plugin[key] = defaults[key];\n                    }\n                });\n                plugin.packagePath = defaults.packagePath;\n                plugin.setup = require(plugin.packagePath);\n            }\n        });\n        return config;\n    }\n\n    function resolveConfigAsync(config, base, callback) {\n        function resolveNext(i) {\n            if (i >= config.length) {\n                return callback(null, config);\n            }\n\n            var plugin = config[i];\n\n            // Shortcut where string is used for plugin without any options.\n            if (typeof plugin === \"string\") {\n                plugin = config[i] = { packagePath: plugin };\n            }\n            // The plugin is a package on the disk.  We need to load it.\n            if (plugin.hasOwnProperty(\"packagePath\") && !plugin.hasOwnProperty(\"setup\")) {\n                resolveModule(base, plugin.packagePath, function(err, defaults) {\n                    if (err) return callback(err);\n\n                    Object.keys(defaults).forEach(function (key) {\n                        if (!plugin.hasOwnProperty(key)) {\n                            plugin[key] = defaults[key];\n                        }\n                    });\n                    plugin.packagePath = defaults.packagePath;\n                    try {\n                        plugin.setup = require(plugin.packagePath);\n                    } catch(e) {\n                        return callback(e);\n                    }\n\n                    return resolveNext(++i);\n                });\n                return;\n            }\n\n            return resolveNext(++i);\n        }\n\n        resolveNext(0);\n    }\n\n    // Loads a module, getting metadata from either it's package.json or export\n    // object.\n    function resolveModuleSync(base, modulePath) {\n        var packagePath;\n        try {\n            packagePath = resolvePackageSync(base, modulePath + \"/package.json\");\n        }\n        catch (err) {\n            if (err.code !== \"ENOENT\") throw err;\n        }\n        var metadata = packagePath && require(packagePath).plugin || {};\n        if (packagePath) {\n            modulePath = dirname(packagePath);\n        } else {\n            modulePath = resolvePackageSync(base, modulePath);\n        }\n        var module = require(modulePath);\n        metadata.provides = metadata.provides || module.provides || [];\n        metadata.consumes = metadata.consumes || module.consumes || [];\n        metadata.packagePath = modulePath;\n        return metadata;\n    }\n\n    // Loads a module, getting metadata from either it's package.json or export\n    // object.\n    function resolveModule(base, modulePath, callback) {\n        resolvePackage(base, modulePath + \"/package.json\", function(err, packagePath) {\n            //if (err && err.code !== \"ENOENT\") return callback(err);\n\n            var metadata = {};\n            if (!err) {\n                try {\n                    metadata = packagePath && require(packagePath).plugin || {};\n                } catch(e) {\n                    return callback(e);\n                }\n            }\n\n            (function(next) {\n                if (err) {\n                    //@todo Fabian what is a better way?\n                    resolvePackage(base, modulePath + \".js\", next);\n                }\n                else if (packagePath) {\n                    next(null, dirname(packagePath));\n                } \n                else {\n                    resolvePackage(base, modulePath, next);\n                }\n            })(function(err, modulePath) {\n                if (err) return callback(err);\n\n                var module;\n                try {\n                    module = require(modulePath);\n                } catch(e) {\n                    return callback(e);\n                }\n\n                metadata.provides = metadata.provides || module.provides || [];\n                metadata.consumes = metadata.consumes || module.consumes || [];\n                metadata.packagePath = modulePath;\n                callback(null, metadata);\n            });\n        });\n    }\n\n    // Node style package resolving so that plugins' package.json can be found relative to the config file\n    // It's not the full node require system algorithm, but it's the 99% case\n    // This throws, make sure to wrap in try..catch\n    function resolvePackageSync(base, packagePath) {\n        var originalBase = base;\n        if (!(base in packagePathCache)) {\n            packagePathCache[base] = {};\n        }\n        var cache = packagePathCache[base];\n        if (packagePath in cache) {\n            return cache[packagePath];\n        }\n        var newPath;\n        if (packagePath[0] === \".\" || packagePath[0] === \"/\") {\n            newPath = resolve(base, packagePath);\n            if (!existsSync(newPath)) {\n                newPath = newPath + \".js\";\n            }\n            if (existsSync(newPath)) {\n                newPath = realpathSync(newPath);\n                cache[packagePath] = newPath;\n                return newPath;\n            }\n        }\n        else {\n            while (base) {\n                newPath = resolve(base, \"node_modules\", packagePath);\n                if (existsSync(newPath)) {\n                    newPath = realpathSync(newPath);\n                    cache[packagePath] = newPath;\n                    return newPath;\n                }\n                base = resolve(base, '..');\n            }\n        }\n        var err = new Error(\"Can't find '\" + packagePath + \"' relative to '\" + originalBase + \"'\");\n        err.code = \"ENOENT\";\n        throw err;\n    }\n\n    function resolvePackage(base, packagePath, callback) {\n        var originalBase = base;\n        if (!packagePathCache.hasOwnProperty(base)) {\n            packagePathCache[base] = {};\n        }\n        var cache = packagePathCache[base];\n        if (cache.hasOwnProperty(packagePath)) {\n            return callback(null, cache[packagePath]);\n        }\n        if (packagePath[0] === \".\" || packagePath[0] === \"/\") {\n            var newPath = resolve(base, packagePath);\n            exists(newPath, function(exists) {\n                if (exists) {\n                    realpath(newPath, function(err, newPath) {\n                        if (err) return callback(err);\n\n                        cache[packagePath] = newPath;\n                        return callback(null, newPath);\n                    });\n                } else {\n                    var err = new Error(\"Can't find '\" + packagePath + \"' relative to '\" + originalBase + \"'\");\n                    err.code = \"ENOENT\";\n                    return callback(err);\n                }\n            });\n        }\n        else {\n            tryNext(base);\n        }\n\n        function tryNext(base) {\n            if (base == \"/\") {\n                var err = new Error(\"Can't find '\" + packagePath + \"' relative to '\" + originalBase + \"'\");\n                err.code = \"ENOENT\";\n                return callback(err);\n            }\n\n            var newPath = resolve(base, \"node_modules\", packagePath);\n            exists(newPath, function(exists) {\n                if (exists) {\n                    realpath(newPath, function(err, newPath) {\n                        if (err) return callback(err);\n\n                        cache[packagePath] = newPath;\n                        return callback(null, newPath);\n                    });\n                } else {\n                    var nextBase = resolve(base, '..');\n                    if (nextBase === base)\n                        tryNext(\"/\"); // for windows\n                    else\n                        tryNext(nextBase);\n                }\n            });\n        }\n    }\n\n\n}());\n\n// Otherwise use amd to load modules.\nelse (function () {\n    exports.loadConfig = loadConfig;\n    exports.resolveConfig = resolveConfig;\n\n    function loadConfig(path, callback) {\n        require([path], function (config) {\n            resolveConfig(config, callback);\n        });\n    }\n\n    function resolveConfig(config, base, callback, errback) {\n        if (typeof base == \"function\")\n            return resolveConfig(config, \"\", arguments[1], arguments[2]);\n        \n        var paths = [], pluginIndexes = {};\n        config.forEach(function (plugin, index) {\n            // Shortcut where string is used for plugin without any options.\n            if (typeof plugin === \"string\") {\n                plugin = config[index] = { packagePath: plugin };\n            }\n            // The plugin is a package over the network.  We need to load it.\n            if (plugin.hasOwnProperty(\"packagePath\") && !plugin.hasOwnProperty(\"setup\")) {\n                paths.push((base || \"\") + plugin.packagePath);\n                pluginIndexes[plugin.packagePath] = index;\n            }\n        });\n        // Mass-Load path-based plugins using amd's require\n        require(paths, function () {\n            var args = arguments;\n            paths.forEach(function (name, i) {\n                var module = args[i];\n                var plugin = config[pluginIndexes[name]];\n                plugin.setup = module;\n                plugin.provides = module.provides || plugin.provides || [];\n                plugin.consumes = module.consumes || plugin.consumes || [];\n            });\n            callback(null, config);\n        }, errback);\n    }\n}());\n\nexports.createApp = createApp;\nexports.Architect = Architect;\n\n// Check a plugin config list for bad dependencies and throw on error\nfunction checkConfig(config, lookup) {\n\n    // Check for the required fields in each plugin.\n    config.forEach(function (plugin) {\n        if (plugin.checked) { return; }\n        if (!plugin.hasOwnProperty(\"setup\")) {\n            throw new Error(\"Plugin is missing the setup function \" + JSON.stringify(plugin));\n        }\n        if (!plugin.hasOwnProperty(\"provides\")) {\n            throw new Error(\"Plugin is missing the provides array \" + JSON.stringify(plugin));\n        }\n        if (!plugin.hasOwnProperty(\"consumes\")) {\n            throw new Error(\"Plugin is missing the consumes array \" + JSON.stringify(plugin));\n        }\n    });\n\n    return checkCycles(config, lookup);\n}\n\nfunction checkCycles(config, lookup) {\n    var plugins = [];\n    config.forEach(function(pluginConfig, index) {\n        plugins.push({\n            packagePath: pluginConfig.packagePath,\n            provides: pluginConfig.provides.concat(),\n            consumes: pluginConfig.consumes.concat(),\n            i: index\n        });\n    });\n\n    var resolved = {\n        hub: true\n    };\n    var changed = true;\n    var sorted = [];\n\n    while(plugins.length && changed) {\n        changed = false;\n\n        plugins.concat().forEach(function(plugin) {\n            var consumes = plugin.consumes.concat();\n\n            var resolvedAll = true;\n            for (var i=0; i<consumes.length; i++) {\n                var service = consumes[i];\n                if (!resolved[service] && (!lookup || !lookup(service))) {\n                    resolvedAll = false;\n                } else {\n                    plugin.consumes.splice(plugin.consumes.indexOf(service), 1);\n                }\n            }\n\n            if (!resolvedAll)\n                return;\n\n            plugins.splice(plugins.indexOf(plugin), 1);\n            plugin.provides.forEach(function(service) {\n                resolved[service] = true;\n            });\n            sorted.push(config[plugin.i]);\n            changed = true;\n        });\n    }\n\n    if (plugins.length) {\n        var unresolved = {};\n        plugins.forEach(function(plugin) {\n            delete plugin.config;\n            plugin.consumes.forEach(function(name) {\n                if (unresolved[name] === false)\n                    return;\n                if (!unresolved[name])\n                    unresolved[name] = [];\n                unresolved[name].push(plugin.packagePath);\n            });\n            plugin.provides.forEach(function(name) {\n                unresolved[name] = false;\n            });\n        });\n        \n        Object.keys(unresolved).forEach(function(name) {\n            if (unresolved[name] === false)\n                delete unresolved[name];\n        });\n\n        var unresolvedList = Object.keys(unresolved);\n        var resolvedList = Object.keys(resolved);\n        var err  = new Error(\"Could not resolve dependencies\\n\"\n            + (unresolvedList.length ? \"Missing services: \" + unresolvedList\n            : \"Config contains cyclic dependencies\" // TODO print cycles\n            ));\n        err.unresolved = unresolvedList;\n        err.resolved = resolvedList;\n        throw err;\n    }\n\n    return sorted;\n}\n\nfunction Architect(config) {\n    var app = this;\n    app.config = config;\n    app.packages = {};\n    app.pluginToPackage = {};\n    \n    var isAdditionalMode;\n    var services = app.services = {\n        hub: {\n            on: function (name, callback) {\n                app.on(name, callback);\n            }\n        }\n    };\n\n    // Check the config\n    var sortedPlugins = checkConfig(config);\n\n    var destructors = [];\n    var recur = 0, callnext, ready;\n    function startPlugins(additional) {\n        var plugin = sortedPlugins.shift();\n        if (!plugin) {\n            ready = true;\n            return app.emit(additional ? \"ready-additional\" : \"ready\", app);\n        }\n\n        var imports = {};\n        if (plugin.consumes) {\n            plugin.consumes.forEach(function (name) {\n                imports[name] = services[name];\n            });\n        }\n        \n        var m = /^plugins\\/([^\\/]+)|\\/plugins\\/[^\\/]+\\/([^\\/]+)/.exec(plugin.packagePath);\n        var packageName = m && (m[1] || m[2]);\n        if (!app.packages[packageName]) app.packages[packageName] = [];\n        \n        if (DEBUG) {\n            recur++;\n            plugin.setup(plugin, imports, register);\n            \n            while (callnext && recur <= 1) {\n                callnext = false;\n                startPlugins(additional);\n            }\n            recur--;\n        }\n        else {\n            try {\n                recur++;\n                plugin.setup(plugin, imports, register);\n            } catch (e) {\n                e.plugin = plugin;\n                app.emit(\"error\", e);\n                throw e;\n            } finally {\n                while (callnext && recur <= 1) {\n                    callnext = false;\n                    startPlugins(additional);\n                }\n                recur--;\n            }\n        }\n        \n        function register(err, provided) {\n            if (err) { return app.emit(\"error\", err); }\n            plugin.provides.forEach(function (name) {\n                if (!provided.hasOwnProperty(name)) {\n                    var err = new Error(\"Plugin failed to provide \" + name + \" service. \" + JSON.stringify(plugin));\n                    err.plugin = plugin;\n                    return app.emit(\"error\", err);\n                }\n                services[name] = provided[name];\n                app.pluginToPackage[name] = {\n                    path: plugin.packagePath,\n                    package: packageName,\n                    version: plugin.version,\n                    isAdditionalMode: isAdditionalMode\n                };\n                app.packages[packageName].push(name);\n                \n                app.emit(\"service\", name, services[name], plugin);\n            });\n            if (provided && provided.hasOwnProperty(\"onDestroy\"))\n                destructors.push(provided.onDestroy);\n\n            app.emit(\"plugin\", plugin);\n            \n            if (recur) return (callnext = true);\n            startPlugins(additional);\n        }\n    }\n\n    // Give createApp some time to subscribe to our \"ready\" event\n    (typeof process === \"object\" ? process.nextTick : setTimeout)(startPlugins);\n\n    this.loadAdditionalPlugins = function(additionalConfig, callback){\n        isAdditionalMode = true;\n        \n        exports.resolveConfig(additionalConfig, function (err, additionalConfig) {\n            if (err) return callback(err);\n            \n            app.once(ready ? \"ready-additional\" : \"ready\", function(app){\n                callback(null, app);\n            }); // What about error state?\n            \n            // Check the config - hopefully this works\n            var _sortedPlugins = checkConfig(additionalConfig, function(name){\n                return services[name];\n            });\n            \n            if (ready) {\n                sortedPlugins = _sortedPlugins;\n                // Start Loading additional plugins\n                startPlugins(true);\n            }\n            else {\n                _sortedPlugins.forEach(function(item){\n                    sortedPlugins.push(item);\n                });\n            }\n        });\n    }\n\n    this.destroy = function() {\n        destructors.forEach(function(destroy) {\n            destroy();\n        });\n\n        destructors = [];\n    };\n}\nArchitect.prototype = Object.create(EventEmitter.prototype, {constructor:{value:Architect}});\n\nArchitect.prototype.getService = function(name) {\n    if (!this.services[name]) {\n        throw new Error(\"Service '\" + name + \"' not found in architect app!\");\n    }\n    return this.services[name];\n};\n\n// Returns an event emitter that represents the app.  It can emit events.\n// event: (\"service\" name, service) emitted when a service is ready to be consumed.\n// event: (\"plugin\", plugin) emitted when a plugin registers.\n// event: (\"ready\", app) emitted when all plugins are ready.\n// event: (\"error\", err) emitted when something goes wrong.\n// app.services - a hash of all the services in this app\n// app.config - the plugin config that was passed in.\nfunction createApp(config, callback) {\n    var app;\n    try {\n        app = new Architect(config);\n    } catch(err) {\n        if (!callback) throw err;\n        return callback(err, app);\n    }\n    if (callback) {\n        app.on(\"error\", done);\n        app.on(\"ready\", onReady);\n    }\n    return app;\n\n    function onReady(app) {\n        done();\n    }\n\n    function done(err) {\n        if (err) {\n            app.destroy();\n        }\n        app.removeListener(\"error\", done);\n        app.removeListener(\"ready\", onReady);\n        callback(err, app);\n    }\n\n    return app;\n}\n\nreturn exports;\n\n});\n"}